type User {
  id: ID!
  email: String!
  password: String!
  institution: Institution @hasOne
}

type Institution {
  id: ID!
  title: String!
  description: String!
  user: User! @belongsTo
  interships: [Intership]! @hasMany
}

type Intership {
  id: ID!
  title: String!
  description: String!
  institution: Institution! @belongsTo
  city: String!
  field: String!
  applications: [Application]! @hasMany
}

type Application {
  id: ID!
  text: String!
  email: String!
  intership: Intership! @belongsTo
}

type Query @group(middleware: ["auth:api"]) {
  intership(id: ID): Intership!
}

extend type Query {
  currentUser: User
  # ideally, we would have some sort of auth that would prevent accessing
  # non-public properties (such as applications) on the interships
  # with this implementation, nothing can hold back some user from
  # sending a graphql request requesting all the data on the intership model
  interships(text: String, city: String, field: String): [Intership]!
}

type Mutation @group(middleware: ["auth:api"]) {
  signOut: User!
  createInstitution(title: String!, description: String!): Institution!
  createIntership(title: String!, description: String!, city: String!, field: String!): Intership!
  deleteIntership(id: ID!): Intership!
}

extend type Mutation {
  signIn(email: String!, password: String!): User!
  signUp(email: String!, password: String!): User!
  createApplication(email: String!, text: String!, intershipId: ID!): Application!
}